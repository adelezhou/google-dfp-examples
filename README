DFP API Java Client Library
===============================

The client library is distributed in two Maven artifacts. They are:

    <dependency>
      <groupId>com.google.api-ads</groupId>
      <artifactId>ads-lib</artifactId>
      <version>RELEASE</version>
    </dependency>
    <dependency>
      <groupId>com.google.api-ads</groupId>
      <artifactId>dfp-axis</artifactId>
      <version>RELEASE</version>
    </dependency>

The "ads-lib" artifact contains all of the library and utility classes for
accessing the DFP API, but does not support any specific SOAP framework. All
client library classes and utilities are in the package or sub-packages of
"com.google.api.ads.dfp.lib". To add support for the Apache Axis framework,
the "dfp-axis" plugin artifact is also necessary. This artifact also
includes autogenerated classes from the DFP API. They are in the package
"com.google.api.ads.dfp.axis.{version}".


Quick Start Guide
-----------------

Examples can be compiled and run by Maven by executing the following on the
command line:

    $ cd path/to/extracted/distribution
    $ cd src/main/resources

    Modify file with settings. This can be copied to your home directory, in
    which case the resources folder one will be ignored.
    $ vim ads.properties

    $ cd ../../../
    $ mvn -X compile
    $ mvn -X exec:java -Dexec.mainClass="dfp.axis.v201208.GetAllNetworks"

You must have Maven recompile every time you modify the source code or resources
in order for your changes to take effect.


What's in the client library?
-----------------------------

The client library provides full access to all the functionality of the Dfp
API web services plus more. It includes:

  - Generated code: Classes and service clients generated automatically from
    the WSDLs.

  - DfpSession class: The DfpSession class represents one session of
    DFP API use. It is used to request the services the API offers. It will
    keep track of state information, such as authentication information
    generated from the API.

  - DfpServices class: This factory class is responsible for creating API
    service clients. It requires an DfpSession and the service interface
    from the autogenerated code.

  - ads.properties file: This file in the src/main/resources directory is a
    sample that shows you how to specify your credentials for the client library
    to read in. To use the credentials in an ads.properties file, make an
    DfpSession using the following code:

    new DfpSession.Builder().fromFile().build();

    The library will search for an ads.properties file in the following places
    in order: in the user's home directory, in the current directory, and
    finally in the classpath. Files in the src/main/resources directory show up
    on classpath. Every time you modify a file in src/main/resources, you must
    have Maven recompile the project to pick up the changes. If you copy it
    to your home directory, you will not need to recompile every time.

  - Examples: This distribution contains examples in the "src/main/java"
    directory. We encourage you to use code samples to get started writing your
    own application. All the code samples are runnable out of the box, but you
    will have to set your credentials in "resources/ads.properties". You may
    also have to substitute in actual values places that are marked with the
    string "INSERT_{SOMETHING}_HERE".


Basic usage
-----------

To write a program that accesses DFP accounts with the client library, do
the following:

  1) Import the following packages or classes:

     // Contains the data classes and service classes.
     import com.google.api.ads.dfp.axis.v201203.*;

     import com.google.api.ads.dfp.lib.client.DfpSession;
     import com.google.api.ads.dfp.lib.factory.DfpServices;

  2a) Create an DfpSession instance, loading credentials from the properties
      file:

      // Get a ClientLogin AuthToken.
      String clientLoginToken =
          new ClientLoginTokens(ClientLoginTokens.DFP_SERVICE).fromFile();

      // Construct an DfpSession.
      DfpSession session =
          new DfpSession.Builder().fromFile()
              .withClientLoginToken(clientLoginToken).build();

      The DfpSession.Builder can read in a clientLoginToken, but won't read
      in the email or password. The ClientLoginTokens.fromFile will read email
      and password from the file and generate a ClientLoginToken from those
      values.

  2b) Alternatively, you can specify your credentials in the constructor:

      // Get a ClientLogin AuthToken.
      String clientLoginToken =
          new ClientLoginTokens(ClientLoginTokens.DFP_SERVICE)
              .from(email, password);

      // Construct an DfpSession.
      DfpSession session =
          new DfpSession.Builder()
              .withNetworkCode(networkCode)
              // ...
              .withClientLoginToken(clientLoginToken)
              .build();

  3) Instantiate the desired service class using the DfpServices utility and
     a Class object representing your service.

     // Get the NetworkService.
     NetworkServiceInterface networkService =
         new DfpServices().get(session, NetworkServiceInterface.class);

  4) Create data objects and invoke methods on the service class instance. The
     data objects and methods map directly to the data objects and requests for
     the corresponding web service.

      // Get all networks that you have access to with the current login
      // credentials.
      Network[] networks = networkService.getAllNetworks();

You'll need to pull in the library as dependencies. This example project
contains a full pom.xml that will pull in all of the necessary artifacts. There
is no need to worry about accessing the WSDLs for the web services; the classes
in the client library do it for you. Examples in the "src/main/java" directory
can be used to get started writing your own client.


How do I enable logging?
------------------------

The client library uses SLF4J for all logging. If you want to turn logging on,
you must include a plugin that bridges SLF4J with a concrete logging framework.
To quickly get you started and to serve as an example of how to do this, this
example distribution uses the log4j framework.

There are the following loggers within the library:

  - com.google.api.ads.dfp.lib.client.DfpServiceClient.soapXmlLogger

    Logs incoming and outgoing SOAP requests/responses. SOAP requests and
    responses are logged as WARN for exceptions and INFO for all other requests.
    You can configure your logging framework to accept logs on these parameters.
    See the example resources/log4j.properties for more information.

  - com.google.api.ads.dfp.lib.client.DfpServiceClient.requestInfoLogger

    Logs all requests from the client library along with information such as the
    timestamp, service, method, endpoint URL.

To bridge SLF4J for a logging framework, you must do the following:

  1) Include the plugin and logging framework dependencies in the pom.xml file's
     dependencies list.

     <!-- Adds the log4j framework -->
     <dependency>
       <groupId>log4j</groupId>
       <artifactId>log4j</artifactId>
       <version>1.2.16</version>
     </dependency>
     <!-- Make SLF4J use log4j as the logging framework -->
     <dependency>
       <groupId>org.slf4j</groupId>
       <artifactId>slf4j-log4j12</artifactId>
       <version>1.6.2</version>
     </dependency>

  2) If your logging framework requires a configuration file, you must place it
     in the resources directory. This distribution includes an example
     configuration for log4j named "log4j.properties".

Because the client library uses SLF4J, the behavior of these loggers is highly
customizable. Please see the "resources/log4j.properties" file for details on
the default behavior in this example project.


What if I am behind an HTTP Proxy server?
----------------------------------------

It is recommended that the user set JVM arguments to configure this application
for their proxy.

  http.proxyHost      Hostname of proxy server                      web-proxy
  http.proxyPort      Port on server of proxy                       8080
  http.proxyUser      Optional username for proxy authentication    someone
  http.proxyPassword  Optional proxy server password                secret

These properties can be set within the command line such as:

    $ mvn -Dhttp.proxyHost=web-proxy -Dhttp.proxyPort=8080\
      -Dhttp.proxyUser=someone -Dhttp.proxyPassword=secret ...

If necessary, set this up in code by doing the following:

    System.setProperty("http.proxyHost", "web-proxy");
    System.setProperty("http.proxyPort", "8080");
    System.setProperty("http.proxyUser", "someone");
    System.setProperty("http.proxyPassword", "secret");


Where do I submit bug reports, feature requests and patches?
------------------------------------------------------------

All of these items can be submitted at
http://code.google.com/p/google-api-ads-java/issues/list.


Authors:
    Adam Rogal
